import tensorflow as tf 
import numpy as np

#Aqui declaramos un array con los datos celsius y fahrenheit y asi el modelo pueda entrenar
celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
fahrenhit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)

#Dise√±aremos el modelo de red neuronal con Keras
#Utilizaremos una capa densa y le indicamos el numero de salidas de la red neuronal, en este caso es 1
#En input_shape le estamos diciendo que tenemos una entrada con una neurona
capa = tf.keras.layers.Dense(units=1, input_shape=[1])
#Ahora usaremos un modelo Secuencial, hay mas modelos pero es para redes mas avanzadas
modelo = tf.keras.Sequential([capa])

#TODO PARAMETROS DE ENTRENAMIENTO
#Propiedades de optimizacion y funcion de perdida

modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

#INICIAR ENTRENAMIENTO
print("Comenzando entrenamiento!")
historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=False)
print("Modelo ya entrenado")

#UNA VEZ QUE YA ENTRENAMOS EL MODELO PODEMOS VER CUANTAS VUELTAS LE TOMO

import matplotlib.pyplot as plt
plt.xlabel("# Repeticiones")
plt.ylabel("Magnitud de Perdida del Modelo")
plt.plot(historial.history["loss"])


#PIDAMOS AHORA QUE EL MODELO REALIZE UNA PREDICCION DE LOS GRADOS
print("Realizar prediccion")
resultado = modelo.predict([100.0])
